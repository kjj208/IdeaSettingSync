<templateSet group="A~dao">
  <template name="~plusgenerator" value="public class CodeGenerator {&#10;&#10;    public static String scanner(String tip) {&#10;        Scanner scanner = new Scanner(System.in);&#10;        StringBuilder help = new StringBuilder();&#10;        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);&#10;        System.out.println(help.toString());&#10;        if (scanner.hasNext()) {&#10;            String ipt = scanner.next();&#10;            if (StringUtils.isNotBlank(ipt)) {&#10;                if (ipt == &quot;null&quot;) return &quot;&quot;;&#10;                return ipt;&#10;            }&#10;        }&#10;        throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        // 代码生成器对象&#10;        AutoGenerator mpg = new AutoGenerator();&#10;        // 全局配置&#10;        GlobalConfig gc = new GlobalConfig();&#10;        String projectPath = System.getProperty(&quot;user.dir&quot;);&#10;        gc.setOutputDir(projectPath + scanner(&quot;聚合工程的s模块名(eg:/模块名 没有清输入null)：&quot;) + &quot;/src/main/java&quot;);&#10;        gc.setAuthor(&quot;chenjj&quot;); //作者&#10;        gc.setOpen(false); //不打开生成的文件夹&#10;        gc.setFileOverride(true); //是否覆盖&#10;        gc.setServiceName(&quot;%sService&quot;); //去除I前缀&#10;        gc.setIdType(IdType.ASSIGN_ID); //雪花&#10;        gc.setDateType(DateType.ONLY_DATE); //日期&#10;        gc.setSwagger2(true); //实体属性 Swagger2 注解&#10;        //ztd&#10;        gc.setActiveRecord(false);&#10;        gc.setEnableCache(false);&#10;        gc.setBaseResultMap(true);&#10;        gc.setBaseColumnList(false);&#10;        mpg.setGlobalConfig(gc);&#10;        // 数据源配置&#10;        DataSourceConfig dsc = new DataSourceConfig();&#10;        dsc.setUrl(&quot;jdbc:mysql://localhost:3306/ztd-plus?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8&quot;);&#10;        // dsc.setSchemaName(&quot;public&quot;);&#10;        dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        dsc.setUsername(&quot;root&quot;);&#10;        dsc.setPassword(&quot;sql2020&quot;);&#10;        dsc.setDbType(DbType.MYSQL);&#10;        mpg.setDataSource(dsc);&#10;        // 包配置&#10;        PackageConfig pc = new PackageConfig();&#10;        //pc.setModuleName(scanner(&quot;模块名:&quot;));&#10;        pc.setParent(&quot;cn.cj&quot;);&#10;        pc.setEntity(&quot;entity&quot;);&#10;        pc.setMapper(&quot;mapper&quot;);&#10;        pc.setService(&quot;service&quot;);&#10;        pc.setServiceImpl(&quot;service.impl&quot;);&#10;        pc.setController(&quot;controller&quot;);&#10;        mpg.setPackageInfo(pc);&#10;&#10;        // 注入自定义配置，可以在 VM 中使用 ${cfg.packageMy} 设置值&#10;        //InjectionConfig cfg = new InjectionConfig() {&#10;        //    @Override&#10;        //    public void initMap() {&#10;        //        // to do nothing&#10;        //    }&#10;        //};&#10;&#10;        // 如果模板引擎是 freemarker&#10;        //String templatePath = &quot;/templates/mapper.xml.ftl&quot;;&#10;        // 如果模板引擎是 velocity&#10;        // String templatePath = &quot;/templates/mapper.xml.vm&quot;;&#10;&#10;        // 自定义输出配置&#10;        //List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();&#10;        // 自定义配置会被优先输出&#10;        //focList.add(new FileOutConfig(templatePath) {&#10;        //    @Override&#10;        //    public String outputFile(com.baomidou.mybatisplus.generator.config.po.TableInfo tableInfo) {&#10;                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！&#10;        //        return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName()&#10;        //               + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;&#10;        //    }&#10;        //});&#10;        /*&#10;        cfg.setFileCreate(new IFileCreate() {&#10;            @Override&#10;            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {&#10;                // 判断自定义文件夹是否需要创建&#10;                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);&#10;                if (fileType == FileType.MAPPER) {&#10;                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false&#10;                    return !new File(filePath).exists();&#10;                }&#10;                // 允许生成模板文件&#10;                return true;&#10;            }&#10;        });&#10;        */&#10;//        cfg.setFileOutConfigList(focList);&#10;//        mpg.setCfg(cfg);&#10;        // 配置模板&#10;//        TemplateConfig templateConfig = new TemplateConfig();&#10;        // 配置自定义输出模板&#10;        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别&#10;        // templateConfig.setEntity(&quot;templates/entity2.java&quot;);&#10;        // templateConfig.setService();&#10;        // templateConfig.setController();&#10;//        templateConfig.setXml(null);&#10;//        mpg.setTemplate(templateConfig);&#10;&#10;        // 策略配置&#10;&#10;        StrategyConfig strategy = new StrategyConfig();&#10;        strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));&#10;        strategy.setNaming(NamingStrategy.underline_to_camel);&#10;        strategy.setColumnNaming(NamingStrategy.underline_to_camel);&#10;        strategy.setEntityLombokModel(true); //自动lombok&#10;        strategy.setRestControllerStyle(true); //restful&#10;        strategy.setControllerMappingHyphenStyle(true); //访问路径驼峰&#10;        //自动填充&#10;//        TableFill create = new TableFill(&quot;mgt_create&quot;, FieldFill.INSERT);&#10;//        TableFill update = new TableFill(&quot;mgt_update&quot;, FieldFill.INSERT_UPDATE);&#10;        TableFill create = new TableFill(&quot;create_time&quot;, FieldFill.INSERT);&#10;        TableFill update = new TableFill(&quot;update_time&quot;, FieldFill.INSERT_UPDATE);&#10;        ArrayList&lt;TableFill&gt; list = new ArrayList&lt;&gt;();&#10;        list.add(create);&#10;        list.add(update);&#10;        strategy.setTableFillList(list);&#10;        //逻辑删除&#10;        strategy.setLogicDeleteFieldName(&quot;deleted&quot;);&#10;        //乐观锁&#10;        strategy.setVersionFieldName(&quot;version&quot;);&#10;        mpg.setStrategy(strategy);&#10;&#10;//        strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);&#10;        // 公共父类&#10;//        strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);&#10;        // 写于父类中的公共字段&#10;//        strategy.setSuperEntityColumns(&quot;id&quot;);&#10;//        strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);&#10;//        mpg.setTemplateEngine(new FreemarkerTemplateEngine());&#10;&#10;        //ztd 姿态帝&#10;        // 注入自定义配置，可以在 VM 中使用 ${cfg.packageMy} 设置值&#10;        // InjectionConfig cfg = new InjectionConfig() {&#10;        //     public void initMap() {&#10;        //         Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();&#10;        //         map.put(&quot;packageMy&quot;, packageBase);&#10;        //         this.setMap(map);&#10;        //     }&#10;        // };&#10;&#10;        // mpg.setCfg(cfg);&#10;&#10;        // TemplateConfig tc = new TemplateConfig();&#10;        // tc.setEntity(&quot;templates/entity.java.vm&quot;);&#10;        // tc.setMapper(&quot;templates/mapper.java.vm&quot;);&#10;        // tc.setXml(&quot;templates/mapper.xml.vm&quot;);&#10;        // tc.setServiceImpl(&quot;templates/serviceImpl.java.vm&quot;);&#10;        // tc.setService(&quot;templates/service.java.vm&quot;);&#10;        // tc.setController(&quot;templates/controller.java.vm&quot;);&#10;        // mpg.setTemplate(tc);&#10;        // 执行生成&#10;        mpg.execute();&#10;    }&#10;}&#10;" description="plus 代码生成类" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>