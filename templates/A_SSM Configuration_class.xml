<templateSet group="A~SSM Configuration.class">
  <template name="~TransactionConfig" value="/**&#10; * 和事务相关的配置类&#10; */&#10;public class TransactionConfig {&#10;&#10;    /**&#10;     * 用于创建事务管理器对象&#10;     * @param dataSource&#10;     * @return&#10;     */&#10;    @Bean(name=&quot;transactionManager&quot;)&#10;    public DataSourceTransactionManager createTransactionManager(DataSource dataSource){&#10;        return new DataSourceTransactionManager(dataSource);&#10;    }&#10;}" description="TransactionConfig 类 for SSM" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="~SpringConfiguration" value="&#10;@Configuration&#10;@ComponentScan(&quot;com.itheima&quot;)&#10;@Import({JdbcConfig.class,TransactionConfig.class})&#10;@PropertySource(&quot;jdbcConfig.properties&quot;)&#10;@EnableTransactionManagement&#10;" description="ssm框架 spring加mybatis配置类 分解" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="~SpringConfiguration_dao" value="@Configuration&#10;@ComponentScan(basePackages = {&quot;cn.cj.service&quot;,&quot;cn.cj.dao&quot;},useDefaultFilters = true,&#10;        excludeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class)})&#10;@Import({JdbcConfig.class})&#10;public class SpringConfiguration_dao {&#10;&#10;}&#10;" description="SpringConfiguration_dao 注解类" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
    </context>
  </template>
  <template name="~SpringConfiguration_all" value="/**&#10; * @author kjj208&#10; * @create 2020-03-28 15:10&#10; */&#10;@Configuration&#10;@ComponentScan(basePackages = {&quot;cn.cj&quot;},useDefaultFilters = true,&#10;excludeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class)})&#10;@PropertySource(value = &quot;jdbcConfig.properties&quot;, ignoreResourceNotFound = true)&#10;@EnableTransactionManagement(proxyTargetClass = true)&#10;public class SpringConfiguration {&#10;&#10;&#10;    @Value(&quot;${jdbc.driver}&quot;)&#10;    private String driver;&#10;&#10;    @Value(&quot;${jdbc.url}&quot;)&#10;    private String url;&#10;&#10;    @Value(&quot;${jdbc.username}&quot;)&#10;    private String username;&#10;&#10;    @Value(&quot;${jdbc.password}&quot;)&#10;    private String password;&#10;&#10;    /**&#10;     * 创建ComboPooledDataSource&#10;     *&#10;     * @return&#10;     */&#10;    @Bean(name = &quot;dataSource&quot;)&#10;    public ComboPooledDataSource createDataSource() throws PropertyVetoException {&#10;        ComboPooledDataSource ds = new ComboPooledDataSource();&#10;        /*ds.setUser(username);&#10;        ds.setPassword(password);&#10;        ds.setJdbcUrl(url);&#10;        ds.setDriverClass(driver);*/&#10;        ds.setUser(&quot;root&quot;);// 用户姓名&#10;        ds.setPassword(&quot;sql2020&quot;);// 用户密码&#10;        ds.setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/webtextdb?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8&quot;);// MySQL数据库连接url&#10;        ds.setDriverClass(&quot;com.mysql.cj.jdbc.Driver&quot;);&#10;        ds.setMaxPoolSize(30);&#10;        ds.setMinPoolSize(20);&#10;        ds.setMaxStatements(100);&#10;        return ds;&#10;    }&#10;&#10;&#10;    /**&#10;     * 创建SqlSessionFactoryBean&#10;     *&#10;     * @param dataSource&#10;     * @return&#10;     */&#10;    @Bean(name = &quot;sqlSessionFactory&quot;)&#10;    public SqlSessionFactoryBean createSqlSessionFactory(ComboPooledDataSource dataSource) {&#10;        SqlSessionFactoryBean factory = new SqlSessionFactoryBean();&#10;        factory.setDataSource(dataSource);&#10;        factory.setTypeAliasesPackage(&quot;cn.cj.domain&quot;);&#10;        return factory;&#10;    }&#10;&#10;    /**&#10;     * 创建MapperScannerConfigurer&#10;     * 将生成的代理类放到sping容器中&#10;     *&#10;     * @return&#10;     */&#10;    @Bean(name = &quot;mapperScannerConfigurer&quot;)&#10;    public MapperScannerConfigurer createMapperScannerConfigurer() {&#10;        MapperScannerConfigurer mapper = new MapperScannerConfigurer();&#10;        mapper.setBasePackage(&quot;cn.cj.dao&quot;);&#10;        return mapper;&#10;    }&#10;&#10;    @Bean(name=&quot;txManager&quot;)&#10;    public DataSourceTransactionManager createTransactionManager(ComboPooledDataSource dataSource){&#10;        return new DataSourceTransactionManager(dataSource);&#10;    }&#10;&#10;&#10;}&#10;" description="ssm框架 spring加mybatis配置类 整合" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
    </context>
  </template>
  <template name="~SpringMVCConfiguration_all" value="/**&#10; * @author kjj208&#10; * @create 2020-03-28 18:05&#10; */&#10;@Configuration&#10;@ComponentScan(basePackages = &quot;cn.cj&quot;, useDefaultFilters = false,&#10;includeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION,&#10;classes = Controller.class),&#10;&#10;@ComponentScan.Filter(type = FilterType.ANNOTATION,&#10;classes = Configuration.class)})&#10;&#10;//Sring MVC  注解驱动（映射器&amp;适配器）&#10;//@EnableWebMvc&#10;&#10;public class SpringMVCConfiguration extends WebMvcConfigurationSupport {&#10;&#10;&#10;//    @Override&#10;//    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {&#10;//        //相当于&lt;mvc:default-servlet-handler&gt;&lt;/mvc:default-servlet-handler&gt;&#10;//        super.configureDefaultServletHandling(configurer);&#10;//        //启用默认Servlet支持&#10;//        configurer.enable();&#10;//    }&#10;&#10;&#10;    /**&#10;     * 放行静态资源&#10;     * @param registry&#10;     */&#10;    @Override&#10;    public void addResourceHandlers(ResourceHandlerRegistry registry) {&#10;        super.addResourceHandlers(registry);&#10;        registry.addResourceHandler(&quot;/js/**&quot;).addResourceLocations(&quot;/js/&quot;);&#10;        registry.addResourceHandler(&quot;/js/login/**&quot;).addResourceLocations(&quot;/js/login/&quot;);&#10;        registry.addResourceHandler(&quot;/css/**&quot;).addResourceLocations(&quot;/css/&quot;);&#10;        registry.addResourceHandler(&quot;/css/login/**&quot;).addResourceLocations(&quot;/css/login/&quot;);&#10;        registry.addResourceHandler(&quot;/images/**&quot;).addResourceLocations(&quot;/images/&quot;);&#10;        registry.addResourceHandler(&quot;/images/login/**&quot;).addResourceLocations(&quot;/images/login/&quot;);&#10;    }&#10;&#10;    /**&#10;     * 视图解析器&#10;     * @param registry&#10;     */&#10;    @Override&#10;    protected void configureViewResolvers(ViewResolverRegistry registry) {&#10;        super.configureViewResolvers(registry);&#10;        registry.jsp(&quot;/WEB-INF/pages/&quot;, &quot;.jsp&quot;);&#10;    }&#10;&#10;    /**&#10;     * 拦截器&#10;     * @param registry&#10;     */&#10;   /* @Override&#10;    public void addInterceptors(InterceptorRegistry registry) {&#10;        //登录拦截器&#10;        LoginInterceptor loginInterceptor = new LoginInterceptor();&#10;        //添加拦截器&#10;        registry.addInterceptor(loginInterceptor).addPathPatterns(&quot;/**&quot;).excludePathPatterns(&quot;main/ValidateCode&quot;).excludePathPatterns(&quot;static&quot;);&#10;    }*/&#10;&#10;    /**&#10;     * 文件上传&#10;     * @return&#10;     */&#10;    /*@Bean(name = &quot;multipartResolver&quot;)&#10;    public MultipartResolver getMultipartResolver() {&#10;        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();&#10;        multipartResolver.setDefaultEncoding(&quot;UTF-8&quot;);&#10;        multipartResolver.setMaxUploadSize(52428800);&#10;        multipartResolver.setMaxInMemorySize(40960);&#10;        multipartResolver.setMaxUploadSizePerFile(10485760);&#10;        return multipartResolver;&#10;    }&#10;*/&#10;&#10;&#10;}&#10;" description="ssm框架 springMVC配置类 整合" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
    </context>
  </template>
  <template name="~WebInit" value="/**&#10; * @author kjj208&#10; * @create 2020-03-28 18:05&#10; */&#10;public class WebInit implements WebApplicationInitializer {&#10;&#10;    @Override&#10;    public void onStartup(ServletContext servletContext) throws ServletException {&#10;        //System.out.println(&quot;WebInitConfig初始化的操作...&quot;);&#10;        //加载Spring的配置&#10;        AnnotationConfigWebApplicationContext springContext = new AnnotationConfigWebApplicationContext();&#10;        springContext.register(SpringConfiguration.class);&#10;&#10;        ContextLoaderListener listener = new ContextLoaderListener(springContext);&#10;        servletContext.addListener(listener);&#10;&#10;        //加载SpringMVC的配置&#10;        AnnotationConfigWebApplicationContext springMVC = new AnnotationConfigWebApplicationContext();&#10;        springMVC.register(SpringMVCConfiguration.class);&#10;&#10;        ServletRegistration.Dynamic dispatcher = servletContext.addServlet(&quot;SpringServlet&quot;, new DispatcherServlet(springMVC));&#10;        dispatcher.setLoadOnStartup(1);&#10;        dispatcher.addMapping(&quot;/&quot;);&#10;&#10;        //设置编码过滤器&#10;        servletContext.addFilter(&quot;encodingFilter&quot;, new CharacterEncodingFilter(&quot;UTF-8&quot;, true));&#10;    }&#10;}&#10;" description="ssm框架 springMVC web.xml配置类 整合" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="true" />
      <option name="JAVA_COMMENT" value="true" />
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
      <option name="JAVA_STRING" value="true" />
    </context>
  </template>
</templateSet>