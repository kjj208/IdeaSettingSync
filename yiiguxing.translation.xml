<application>
  <component name="AppStorage">
    <histories>
      <item value="Constructs a new runtime exception with {@code null} as its detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link initCause}." />
      <item value="check the manual that corresponds to" />
      <item value="manual" />
      <item value="org.apache.zookeeper.ClientCnxn - Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect" />
      <item value="corresponding" />
      <item value="Res Verify" />
      <item value="on Published" />
      <item value="Observer" />
      <item value="jr Get Type Dependencies" />
      <item value="Redefinition Dynamic Type Builder" />
      <item value="actuator" />
      <item value="Class path contains multiple SLF4J bindings." />
      <item value="for an explanation" />
      <item value="y cannot be cast to ch.qos.logback.classic.LoggerContext" />
      <item value="Exception In Initializer Error" />
      <item value="Configures which api operations (via regex patterns) and HTTP methods to apply security contexts to apis. @param securityContexts - defines security requirements for the apis @return this Docket" />
      <item value="Configures the global io.swagger.model.SecurityScheme's applicable to all or some of the api operations. The configuration of which operations have associated SecuritySchemes is configured with springfox.swagger.plugins.DocketsecurityContexts @param securitySchemes a list of security schemes @return this Docket" />
      <item value="Predicate that evaluates the supplied ant pattern @param antPattern - ant Pattern @return predicate that matches a particular ant pattern" />
      <item value="Updates the terms of service url" />
      <item value="Detected both log4j-over-slf4j.jar AND slf4j-log4j12.jar on the class path, preempting StackOverflowError" />
      <item value="Error starting child" />
      <item value="Detected both log4j-over-slf4j.jar AND slf4j-log4j12.jar on the class path, preempting StackOverflowError." />
      <item value="Specifies the component model to which the generated mapper should adhere. Supported values are &lt;ul&gt; &lt;li&gt; {@code default}: the mapper uses no component model, instances are typically retrieved via {@link MappersgetMapper(Class)}&lt;li&gt; &lt;li&gt; {@code cdi}: the generated mapper is an application-scoped CDI bean and can be retrieved via {@code @Inject}&lt;li&gt; &lt;li&gt; {@code spring}: the generated mapper is a Spring bean and can be retrieved via {@code @Autowired}&lt;li&gt; &lt;li&gt; {@code jsr330}: the generated mapper is annotated with {@code @javax.inject.Named} and {@code @Singleton}, and can be retrieved via {@code @Inject}&lt;li&gt; &lt;ul&gt; The method overrides an unmappedTargetPolicy set in a central configuration set by {@link config() } @return The component model for the generated mapper." />
      <item value="Unsatisfied Dependency Exception" />
      <item value="occurred" />
      <item value="inclusion" />
      <item value="conflicts with existing" />
      <item value="Unexpected exception parsing XML document from file" />
      <item value="existing" />
      <item value="Bean Definition Store Exception" />
      <item value="Unexpected" />
      <item value="was cached in the local repository, resolution will not be reattempted until the update interval of ylzpay-public has elapsed or updates are forced. Original error: Could not transfer metadata com.yhtech.archetypes:yhaf-quickstart:1.0.0-SNAPSHOTmaven-metadata.xml fromto ylzpay-public" />
      <item value="[WARNING] Archetype not found in any catalog. Falling back to central repository. [WARNING] Add a repository with id 'archetype' in your settings.xml if archetype's repository is elsewhere." />
      <item value="Forbid" />
      <item value="is Available" />
      <item value="available" />
      <item value="java.lang.IllegalStateException: Failed to check the status of the service com.ylzinfo.ehc.empi.service.db.IEmpiMmpConfigService. No provider available for the service com.ylzinfo.ehc.empi.service.db.IEmpiMmpConfigService from the url zookeeper:127.0.0.1:12181com.alibaba.dubbo.registry.RegistryService?application=ehc-empi-web&amp;default.timeout=1000000&amp;dubbo=2.5.3&amp;interface=com.ylzinfo.ehc.empi.service.db.IEmpiMmpConfigService&amp;methods=selectByPrimaryKey,insertSelective,updateByPrimaryKeySelective,updateByPrimaryKey,insert,deleteByPrimaryKey&amp;pid=10373&amp;revision=1.0&amp;side=consumer&amp;timestamp=1622445366882 to the consumer 192.168.34.2 use dubbo version 2.5.3" />
      <item value="No provider available for the service com.ylzinfo.ehc.empi.service.db" />
      <item value="nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.ylzinfo.ehc.empi.service.db.IEmpiMmpConfigService com.ylzinfo.ehc.empi.web.xm.UserTypePageController.empiMmpConfigService;" />
      <item value="nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: com.ylzinfo.empi.credit.web.QueryUserCreditStateService com.ylzinfo.ehc.empi.service.sdk.old.SdkCreditQueryService.queryUserCreditStateService;" />
      <item value="[ERROR] [DUBBO] Error creating bean with name 'com.ylzinfo.ehc.empi.service.sdk.ISdkCreditQueryService': Cannot resolve reference to bean 'sdkCreditQueryService' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sdkCreditQueryService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: com.ylzinfo.empi.credit.web.QueryUserCreditStateService com.ylzinfo.ehc.empi.service.sdk.old.SdkCreditQueryService.queryUserCreditStateService; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'queryUserCreditStateService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.ylzinfo.empi.credit.engine.UserEngineService com.ylzinfo.empi.credit.web.QueryUserCreditStateService.userEngineService; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userEngineService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: com.ylzinfo.empi.credit.async.AsyncUserInfoService com.ylzinfo.empi.credit.engine.UserEngineService.asyncUserInfoService; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'asyncUserInfoService': Bean with name 'asyncUserInfoService' has been injected into other beans [creditEngineService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example., dubbo version: 2.5.3, current host: 192.168.34.2 org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.ylzinfo.ehc.empi.service.sdk.ISdkCreditQueryService': Cannot resolve reference to bean 'sdkCreditQueryService' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sdkCreditQueryService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: com.ylzinfo.empi.credit.web.QueryUserCreditStateService com.ylzinfo.ehc.empi.service.sdk.old.SdkCreditQueryService.queryUserCreditStateService; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'queryUserCreditStateService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.ylzinfo.empi.credit.engine.UserEngineService com.ylzinfo.empi.credit.web.QueryUserCreditStateService.userEngineService; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userEngineService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: com.ylzinfo.empi.credit.async.AsyncUserInfoService com.ylzinfo.empi.credit.engine.UserEngineService.asyncUserInfoService; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'asyncUserInfoService': Bean with name 'asyncUserInfoService' has been injected into other beans [creditEngineService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example." />
      <item value="nested" />
      <item value="[ERROR] [DUBBO] Error creating bean with name 'com.ylzinfo.ehc.empi.service.sdk.ISdkCreditQueryService': Cannot resolve reference to bean 'sdkCreditQueryService' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sdkCreditQueryService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: com.ylzinfo.empi.credit.web.QueryUserCreditStateService com.ylzinfo.ehc.empi.service.sdk.old.SdkCreditQueryService.queryUserCreditStateService; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'queryUserCreditStateService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private com.ylzinfo.empi.credit.engine.UserEngineService com.ylzinfo.empi.credit.web.QueryUserCreditStateService.userEngineService; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'userEngineService': Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: com.ylzinfo.empi.credit.async.AsyncUserInfoService com.ylzinfo.empi.credit.engine.UserEngineService.asyncUserInfoService; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'asyncUserInfoService': Bean with name 'asyncUserInfoService' has been injected into other beans [creditEngineService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using 'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example., dubbo version: 2.5.3, current host: 192.168.34.2" />
      <item value="relocated" />
      <item value="select" />
      <item value="nio" />
      <item value="agent" />
      <item value="encrypt" />
      <item value="lockservice" />
      <item value="INFO" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="353" />
        <entry key="ENGLISH" value="354" />
        <entry key="DANISH" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="3" />
        <entry key="ROMANIAN" value="4" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="2" />
        <entry key="ITALIAN" value="4" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1628478035185" />
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>