<application>
  <component name="AppStorage">
    <histories>
      <item value="Comparable" />
      <item value="* This method is not invoked for the main method thread or &quot;system&quot; * group threads created/set up by the VM. Any new functionality added * to this method in the future may have to also be added to the VM. * * A zero status value corresponds to state &quot;NEW&quot;" />
      <item value="signal" />
      <item value="notify" />
      <item value="Interrupted Exception" />
      <item value="Thread state for a waiting thread with a specified waiting time. * A thread is in the timed waiting state due to calling one of * the following methods with a specified positive waiting time:" />
      <item value="Thread state for a terminated thread. * The thread has completed execution." />
      <item value="Class that provides a default implementation for setting and getting load balancer" />
      <item value="* Class that provides a default implementation for setting and getting load balancer * @author stonse" />
      <item value="Unsatisfied Dependency Exception" />
      <item value="[file:/Users/junjiechen/IdeaProjects/SSM_I_200711/I_web/target/classes/applicationContext.xml]: Cannot create inner bean 'com.github.pagehelper.PageInterceptor#39289dda' of type [com.github.pagehelper.PageInterceptor] while setting bean property 'plugins' with key [0]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.github.pagehelper.PageInterceptor#39289dda' defined in URL [file:/Users/junjiechen/IdeaProjects/SSM_I_200711/I_web/target/classes/applicationContext.xml]: Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are: PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'properties' threw exception; nested exception is com.github.pagehelper.PageException: java.lang.ClassNotFoundException: mysql" />
      <item value="Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ordersServiceImpl': Unsatisfied dependency expressed through field 'ordersDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ordersDao' defined in URL [jar:file:/Users/junjiechen/Maven_Repository/cn/cj/I_dao/1.0-SNAPSHOT/I_dao-1.0-SNAPSHOT.jar!/cn/cj/dao/OrdersDao.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in URL" />
      <item value="Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userServiceImpl': Unsatisfied dependency expressed through field 'bCryptPasswordEncoder'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject" />
      <item value="Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ordersServiceImpl': Unsatisfied dependency expressed through field 'ordersDao'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'IOrdersDao' defined in URL [jar:file:/Users/junjiechen/Maven_Repository/com/itheima/heima_ssm/heima_ssm_dao/1.0-SNAPSHOT/heima_ssm_dao-1.0-SNAPSHOT.jar!/com/itheima/ssm/dao/IOrdersDao.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property" />
      <item value="aused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'IOrdersDao' defined in URL [jar:file:/Users/junjiechen/Maven_Repository/com/itheima/heima_ssm/heima_ssm_dao/1.0-SNAPSHOT/heima_ssm_dao-1.0-SNAPSHOT.jar!/com/itheima/ssm/dao/IOrdersDao.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required" />
      <item value="org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ordersServiceImpl': Unsatisfied dependency expressed through field 'ordersDao'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'IOrdersDao' defined in URL [jar:file:/Users/junjiechen/Maven_Repository/com/itheima/heima_ssm/heima_ssm_dao/1.0-SNAPSHOT/heima_ssm_dao-1.0-SNAPSHOT" />
      <item value="2020-07-11 21:13:55,401 517 [ost-startStop-1] ERROR work.web.context.ContextLoader - Context initialization failed" />
      <item value="component" />
      <item value="reference" />
      <item value="aggressive Lazy Loading" />
      <item value="configuration" />
      <item value="Aliases" />
      <item value="Declaring" />
      <item value="The size of the ArrayList (the number of elements it contains)." />
      <item value="Increments modCount!!" />
      <item value="Copies the specified array, truncating or padding with nulls (if necessary) * so the copy has the specified length. For all indices that are * valid in both the original array and the copy, the two arrays will * contain identical values. For any indices that are valid in the * copy but not the original, the copy will contain &lt;tt&gt;null&lt;/tt&gt;. * Such indices will exist if and only if the specified length * is greater than that of the original array. * The resulting array is of the class &lt;tt&gt;newType&lt;/tt&gt;." />
      <item value="the collection whose elements are to be placed into this list" />
      <item value="Constructs a list containing the elements of the specified * collection, in the order they are returned by the collection's * iterator." />
      <item value="Capacity" />
      <item value="Illegal" />
      <item value="Illegal Argument Exception" />
      <item value="Constructs an empty list with the specified initial capacity. * * @param initialCapacity the initial capacity of the list * @throws IllegalArgumentException if the specified initial capacity * is negative" />
      <item value="Constructs an empty list with an initial capacity of ten." />
      <item value="Add a resource handler for serving static resources based on the specified URL path patterns. * The handler will be invoked for every incoming request that matches to one of the specified * path patterns. * &lt;p&gt;Patterns like {@code &quot;/static/**&quot;} or {@code &quot;/css/{filename:\\w+\\.css}&quot;} are allowed. * See {@link org.springframework.util.AntPathMatcher} for more details on the syntax. * @return a {@link ResourceHandlerRegistration} to use to further configure the * registered resource handler" />
      <item value="Whether a resource handler has already been registered for the given path pattern." />
      <item value="Path pattern used for static resources." />
      <item value="Whether to enable default resource handling." />
      <item value="Candidate" />
      <item value="correct" />
      <item value="Return the auto-configuration class names that should be considered. By default * this method will load candidates using {@link SpringFactoriesLoader} with * {@link #getSpringFactoriesLoaderFactoryClass()}. * @param metadata the source metadata * @param attributes the {@link #getAttributes(AnnotationMetadata) annotation * attributes} * @return a list of candidate configurations" />
      <item value="mapped" />
      <item value="fetch" />
      <item value="Specification Executor" />
      <item value="nested exception is javax.persistence.RollbackException: Transaction marked as rollbackOnly" />
      <item value="referenced" />
      <item value="Specification" />
      <item value="org.springframework.transaction.CannotCreateTransactionException: Could not open JPA EntityManager for transaction; nested exception is org.hibernate.exception.GenericJDBCException: Unable to acquire JDBC Connection" />
      <item value="Jpa Repository" />
      <item value="Dialect" />
      <item value="Column" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="189" />
        <entry key="ENGLISH" value="190" />
        <entry key="CROATIAN" value="1" />
        <entry key="ROMANIAN" value="4" />
        <entry key="SPANISH" value="2" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>