<application>
  <component name="AppStorage">
    <histories>
      <item value="The next size value at which to resize (capacity * load factor)." />
      <item value="the table is in creation mode." />
      <item value="Adds the specified element as the tail (last element) of this list." />
      <item value="offer" />
      <item value="poll" />
      <item value="peek" />
      <item value="Returns the (non-null) Node at the specified element index." />
      <item value="@param src the source array. * @param srcPos starting position in the source array. * @param dest the destination array. * @param destPos starting position in the destination data. * @param length the number of array elements to be copied." />
      <item value="Policy" />
      <item value="Rejected" />
      <item value="Synchronous Queue" />
      <item value="Count Down Latch" />
      <item value="for (int i = 0; i &lt; 6; i++) { new Thread(() -&gt; { System.out.println(Thread.currentThread().getName()+&quot;\t离开教室&quot;); },String.valueOf(i)).start(); } System.out.println(&quot;关门&quot;);" />
      <item value="Invalid bound statement" />
      <item value="evict" />
      <item value="only If Absent" />
      <item value="starting position in the source array." />
      <item value="Internal" />
      <item value="DEFAULTCAPACITY EMPTY ELEMENTDATA" />
      <item value="Capacity" />
      <item value="calculate Capacity" />
      <item value="ensure Capacity Internal" />
      <item value="Increments modCount!" />
      <item value="Adfaith Consulting - Employee Information - Main Menu" />
      <item value="Press Enter to continue..." />
      <item value="No selection entered. Press Enter to continue…" />
      <item value="Invalid code! Press Enter to continue…" />
      <item value="Delete Records" />
      <item value="Add New Records" />
      <item value="Search for specific Record(s)" />
      <item value="Print Names and Phone Numbers (formatted)" />
      <item value="Print Names and Phone Numbers" />
      <item value="Print All Current Records (formatted)" />
      <item value="Print All Current Records" />
      <item value="The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;. * Structural modifications are those that change the size of the * list, or otherwise perturb it in such a fashion that iterations in * progress may yield incorrect results." />
      <item value="The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;." />
      <item value="The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;. * Structural modifications are those that change the size of the * list, or otherwise perturb it in such a fashion that iterations in * progress may yield incorrect results. * * &lt;p&gt;This field is used by the iterator and list iterator implementation * returned by the {@code iterator} and {@code listIterator} methods. * If the value of this field changes unexpectedly, the iterator (or list * iterator) will throw a {@code ConcurrentModificationException} in * response to the {@code next}, {@code remove}, {@code previous}, * {@code set} or {@code add} operations. This provides * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in * the face of concurrent modification during iteration. * * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass * wishes to provide fail-fast iterators (and list iterators), then it * merely has to increment this field in its {@code add(int, E)} and * {@code remove(int)} methods (and any other methods that it overrides * that result in structural modifications to the list). A single call to * {@code add(int, E)} or {@code remove(int)} must add no more than * one to this field, or the iterators (and list iterators) will throw * bogus {@code ConcurrentModificationExceptions}. If an implementation * does not wish to provide fail-fast iterators, this field may be" />
      <item value="* Returns a list-iterator of the elements in this list (in proper * sequence), starting at the specified position in the list. * Obeys the general contract of {@code List.listIterator(int)}.&lt;p&gt; * * The list-iterator is &lt;i&gt;fail-fast&lt;/i&gt;: if the list is structurally * modified at any time after the Iterator is created, in any way except * through the list-iterator's own {@code remove} or {@code add} * methods, the list-iterator will throw a * {@code ConcurrentModificationException}. Thus, in the face of * concurrent modification, the iterator fails quickly and cleanly, rather * than risking arbitrary, non-deterministic behavior at an undetermined * time in the future. * * @param index index of the first element to be returned from the * list-iterator (by a call to {@code next}) * @return a ListIterator of the elements in this list (in proper * sequence), starting at the specified position in the list * @throws IndexOutOfBoundsException {@inheritDoc} * @see List#listIterator(int)" />
      <item value="DEFAULT LOAD FACTOR" />
      <item value="Iterator" />
      <item value="constant" />
      <item value="subtract" />
      <item value="Field number for &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; indicating the * minute within the hour. * E.g., at 10:04:15.250 PM the &lt;code&gt;MINUTE&lt;/code&gt; is 4." />
      <item value="/* * Package private constructor which shares value array for speed. * this constructor is always expected to be called with share==true. * a separate constructor is needed because we already have a public * String(char[]) constructor that makes a copy of the given char[]." />
      <item value="Comparable" />
      <item value="* This method is not invoked for the main method thread or &quot;system&quot; * group threads created/set up by the VM. Any new functionality added * to this method in the future may have to also be added to the VM. * * A zero status value corresponds to state &quot;NEW&quot;" />
      <item value="signal" />
      <item value="notify" />
      <item value="Interrupted Exception" />
      <item value="Thread state for a waiting thread with a specified waiting time. * A thread is in the timed waiting state due to calling one of * the following methods with a specified positive waiting time:" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="236" />
        <entry key="ENGLISH" value="238" />
        <entry key="CROATIAN" value="1" />
        <entry key="ROMANIAN" value="4" />
        <entry key="SPANISH" value="2" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>